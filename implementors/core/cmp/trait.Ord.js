(function() {var implementors = {};
implementors["artichoke"] = [{"text":"impl Ord for State","synthetic":false,"types":[]},{"text":"impl Ord for ParserAllocError","synthetic":false,"types":[]},{"text":"impl Ord for ParserLineCountError","synthetic":false,"types":[]},{"text":"impl Ord for ParserInternalError","synthetic":false,"types":[]},{"text":"impl Ord for PromptConfig","synthetic":false,"types":[]}];
implementors["artichoke_backend"] = [{"text":"impl Ord for NoBlockGiven","synthetic":false,"types":[]},{"text":"impl Ord for UnboxRubyError","synthetic":false,"types":[]},{"text":"impl Ord for BoxIntoRubyError","synthetic":false,"types":[]},{"text":"impl Ord for ConstantNameError","synthetic":false,"types":[]},{"text":"impl Ord for NotDefinedError","synthetic":false,"types":[]},{"text":"impl Ord for ElementReference","synthetic":false,"types":[]},{"text":"impl Ord for Integer","synthetic":false,"types":[]},{"text":"impl Ord for Radix","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for IntegerString&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for RelativePath","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for CaptureAt&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for CaptureMatch","synthetic":false,"types":[]},{"text":"impl Ord for Seed","synthetic":false,"types":[]},{"text":"impl Ord for Scan","synthetic":false,"types":[]},{"text":"impl Ord for InvalidEncodingError","synthetic":false,"types":[]},{"text":"impl Ord for RegexpOption","synthetic":false,"types":[]},{"text":"impl Ord for Options","synthetic":false,"types":[]},{"text":"impl Ord for Pattern","synthetic":false,"types":[]},{"text":"impl Ord for Config","synthetic":false,"types":[]},{"text":"impl Ord for InterpreterExtractError","synthetic":false,"types":[]},{"text":"impl Ord for ConvertBytesError","synthetic":false,"types":[]},{"text":"impl Ord for Code","synthetic":false,"types":[]},{"text":"impl Ord for ArenaSavepointError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for ReleaseMetadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Process","synthetic":false,"types":[]},{"text":"impl Ord for Captured","synthetic":false,"types":[]},{"text":"impl Ord for Null","synthetic":false,"types":[]},{"text":"impl Ord for Context","synthetic":false,"types":[]},{"text":"impl Ord for State","synthetic":false,"types":[]},{"text":"impl&lt;Storage:&nbsp;Ord, Align:&nbsp;Ord&gt; Ord for __BindgenBitfieldUnit&lt;Storage, Align&gt;","synthetic":false,"types":[]},{"text":"impl Ord for ArgCountError","synthetic":false,"types":[]}];
implementors["artichoke_core"] = [{"text":"impl Ord for IncrementLinenoError","synthetic":false,"types":[]},{"text":"impl Ord for Rust","synthetic":false,"types":[]},{"text":"impl Ord for Ruby","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Ord for BString","synthetic":false,"types":[]},{"text":"impl Ord for BStr","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDate","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Ord for IsoWeek","synthetic":false,"types":[]},{"text":"impl Ord for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["focaccia"] = [{"text":"impl Ord for CaseFold","synthetic":false,"types":[]},{"text":"impl Ord for NoSuchCaseFoldingScheme","synthetic":false,"types":[]}];
implementors["intaglio"] = [{"text":"impl Ord for Symbol","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]},{"text":"impl Ord for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Ord for AtFlags","synthetic":false,"types":[]},{"text":"impl Ord for OFlag","synthetic":false,"types":[]},{"text":"impl Ord for SealFlag","synthetic":false,"types":[]},{"text":"impl Ord for FdFlag","synthetic":false,"types":[]},{"text":"impl Ord for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Ord for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Ord for PosixFadviseAdvice","synthetic":false,"types":[]},{"text":"impl Ord for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Ord for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Ord for MsFlags","synthetic":false,"types":[]},{"text":"impl Ord for MntFlags","synthetic":false,"types":[]},{"text":"impl Ord for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Ord for FdFlag","synthetic":false,"types":[]},{"text":"impl Ord for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Ord for PollFlags","synthetic":false,"types":[]},{"text":"impl Ord for CloneFlags","synthetic":false,"types":[]},{"text":"impl Ord for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Ord for LioOpcode","synthetic":false,"types":[]},{"text":"impl Ord for LioMode","synthetic":false,"types":[]},{"text":"impl Ord for EpollFlags","synthetic":false,"types":[]},{"text":"impl Ord for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Ord for EfdFlags","synthetic":false,"types":[]},{"text":"impl Ord for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Ord for ProtFlags","synthetic":false,"types":[]},{"text":"impl Ord for MapFlags","synthetic":false,"types":[]},{"text":"impl Ord for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Ord for MsFlags","synthetic":false,"types":[]},{"text":"impl Ord for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Ord for Request","synthetic":false,"types":[]},{"text":"impl Ord for Event","synthetic":false,"types":[]},{"text":"impl Ord for Options","synthetic":false,"types":[]},{"text":"impl Ord for QuotaType","synthetic":false,"types":[]},{"text":"impl Ord for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Ord for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Ord for RebootMode","synthetic":false,"types":[]},{"text":"impl Ord for Signal","synthetic":false,"types":[]},{"text":"impl Ord for SaFlags","synthetic":false,"types":[]},{"text":"impl Ord for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Ord for SfdFlags","synthetic":false,"types":[]},{"text":"impl Ord for SockFlag","synthetic":false,"types":[]},{"text":"impl Ord for MsgFlags","synthetic":false,"types":[]},{"text":"impl Ord for SFlag","synthetic":false,"types":[]},{"text":"impl Ord for Mode","synthetic":false,"types":[]},{"text":"impl Ord for FsFlags","synthetic":false,"types":[]},{"text":"impl Ord for BaudRate","synthetic":false,"types":[]},{"text":"impl Ord for SetArg","synthetic":false,"types":[]},{"text":"impl Ord for FlushArg","synthetic":false,"types":[]},{"text":"impl Ord for FlowArg","synthetic":false,"types":[]},{"text":"impl Ord for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Ord for InputFlags","synthetic":false,"types":[]},{"text":"impl Ord for OutputFlags","synthetic":false,"types":[]},{"text":"impl Ord for ControlFlags","synthetic":false,"types":[]},{"text":"impl Ord for LocalFlags","synthetic":false,"types":[]},{"text":"impl Ord for TimeSpec","synthetic":false,"types":[]},{"text":"impl Ord for TimeVal","synthetic":false,"types":[]},{"text":"impl Ord for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Ord for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Ord for InitFlags","synthetic":false,"types":[]},{"text":"impl Ord for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Ord for ClockId","synthetic":false,"types":[]},{"text":"impl Ord for TimerFlags","synthetic":false,"types":[]},{"text":"impl Ord for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl Ord for Pid","synthetic":false,"types":[]},{"text":"impl Ord for AccessFlags","synthetic":false,"types":[]}];
implementors["onig"] = [{"text":"impl Ord for RegexOptions","synthetic":false,"types":[]},{"text":"impl Ord for SearchOptions","synthetic":false,"types":[]},{"text":"impl Ord for SyntaxOperator","synthetic":false,"types":[]},{"text":"impl Ord for SyntaxBehavior","synthetic":false,"types":[]},{"text":"impl Ord for TraverseCallbackAt","synthetic":false,"types":[]},{"text":"impl Ord for MetaCharType","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Ord for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["spinoso_array"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for SmallArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for Array&lt;T&gt;","synthetic":false,"types":[]}];
implementors["spinoso_env"] = [{"text":"impl Ord for System","synthetic":false,"types":[]},{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl Ord for ArgumentError","synthetic":false,"types":[]},{"text":"impl Ord for InvalidError","synthetic":false,"types":[]}];
implementors["spinoso_exception"] = [{"text":"impl Ord for ArgumentError","synthetic":false,"types":[]},{"text":"impl Ord for EncodingError","synthetic":false,"types":[]},{"text":"impl Ord for EOFError","synthetic":false,"types":[]},{"text":"impl Ord for Exception","synthetic":false,"types":[]},{"text":"impl Ord for Fatal","synthetic":false,"types":[]},{"text":"impl Ord for FiberError","synthetic":false,"types":[]},{"text":"impl Ord for FloatDomainError","synthetic":false,"types":[]},{"text":"impl Ord for FrozenError","synthetic":false,"types":[]},{"text":"impl Ord for IndexError","synthetic":false,"types":[]},{"text":"impl Ord for Interrupt","synthetic":false,"types":[]},{"text":"impl Ord for IOError","synthetic":false,"types":[]},{"text":"impl Ord for KeyError","synthetic":false,"types":[]},{"text":"impl Ord for LoadError","synthetic":false,"types":[]},{"text":"impl Ord for LocalJumpError","synthetic":false,"types":[]},{"text":"impl Ord for NameError","synthetic":false,"types":[]},{"text":"impl Ord for NoMemoryError","synthetic":false,"types":[]},{"text":"impl Ord for NoMethodError","synthetic":false,"types":[]},{"text":"impl Ord for NotImplementedError","synthetic":false,"types":[]},{"text":"impl Ord for RangeError","synthetic":false,"types":[]},{"text":"impl Ord for RegexpError","synthetic":false,"types":[]},{"text":"impl Ord for RuntimeError","synthetic":false,"types":[]},{"text":"impl Ord for ScriptError","synthetic":false,"types":[]},{"text":"impl Ord for SecurityError","synthetic":false,"types":[]},{"text":"impl Ord for SignalException","synthetic":false,"types":[]},{"text":"impl Ord for StandardError","synthetic":false,"types":[]},{"text":"impl Ord for StopIteration","synthetic":false,"types":[]},{"text":"impl Ord for SyntaxError","synthetic":false,"types":[]},{"text":"impl Ord for SystemCallError","synthetic":false,"types":[]},{"text":"impl Ord for SystemExit","synthetic":false,"types":[]},{"text":"impl Ord for SystemStackError","synthetic":false,"types":[]},{"text":"impl Ord for ThreadError","synthetic":false,"types":[]},{"text":"impl Ord for TypeError","synthetic":false,"types":[]},{"text":"impl Ord for UncaughtThrowError","synthetic":false,"types":[]},{"text":"impl Ord for ZeroDivisionError","synthetic":false,"types":[]}];
implementors["spinoso_math"] = [{"text":"impl Ord for Math","synthetic":false,"types":[]},{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl Ord for DomainError","synthetic":false,"types":[]},{"text":"impl Ord for NotImplementedError","synthetic":false,"types":[]}];
implementors["spinoso_random"] = [{"text":"impl Ord for Mt","synthetic":false,"types":[]},{"text":"impl Ord for InitializeError","synthetic":false,"types":[]},{"text":"impl Ord for UrandomError","synthetic":false,"types":[]},{"text":"impl Ord for NewSeedError","synthetic":false,"types":[]}];
implementors["spinoso_securerandom"] = [{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl Ord for ArgumentError","synthetic":false,"types":[]},{"text":"impl Ord for RandomBytesError","synthetic":false,"types":[]},{"text":"impl Ord for DomainError","synthetic":false,"types":[]},{"text":"impl Ord for SecureRandom","synthetic":false,"types":[]}];
implementors["spinoso_symbol"] = [{"text":"impl Ord for IdentifierType","synthetic":false,"types":[]},{"text":"impl Ord for ParseIdentifierError","synthetic":false,"types":[]},{"text":"impl Ord for SymbolOverflowError","synthetic":false,"types":[]},{"text":"impl Ord for Symbol","synthetic":false,"types":[]}];
implementors["spinoso_time"] = [{"text":"impl Ord for Time","synthetic":false,"types":[]},{"text":"impl Ord for ComponentOutOfRangeError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Ord&gt; Ord for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()