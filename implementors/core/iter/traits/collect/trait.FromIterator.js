(function() {var implementors = {};
implementors["artichoke_backend"] = [{"text":"impl FromIterator&lt;mrb_value&gt; for Array","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Value&gt; for Array","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;Value&gt;&gt; for Array","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a Option&lt;Value&gt;&gt; for Array","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl FromIterator&lt;char&gt; for BString","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u8&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a [u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;BString&gt; for BString","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl FromIterator&lt;AtFlags&gt; for AtFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;OFlag&gt; for OFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SealFlag&gt; for SealFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SpliceFFlags&gt; for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FallocateFlags&gt; for FallocateFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ModuleInitFlags&gt; for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;DeleteModuleFlags&gt; for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MntFlags&gt; for MntFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MQ_OFlag&gt; for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;InterfaceFlags&gt; for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PollFlags&gt; for PollFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CloneFlags&gt; for CloneFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;EpollFlags&gt; for EpollFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;EpollCreateFlags&gt; for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;EfdFlags&gt; for EfdFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MemFdCreateFlag&gt; for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ProtFlags&gt; for ProtFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MapFlags&gt; for MapFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MlockAllFlags&gt; for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Options&gt; for Options","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;QuotaValidFlags&gt; for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SaFlags&gt; for SaFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SfdFlags&gt; for SfdFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SockFlag&gt; for SockFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MsgFlags&gt; for MsgFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SFlag&gt; for SFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Mode&gt; for Mode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FsFlags&gt; for FsFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;InputFlags&gt; for InputFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;OutputFlags&gt; for OutputFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;LocalFlags&gt; for LocalFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;WaitPidFlag&gt; for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;AddWatchFlags&gt; for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;InitFlags&gt; for InitFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TimerFlags&gt; for TimerFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TimerSetTimeFlags&gt; for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;AccessFlags&gt; for AccessFlags","synthetic":false,"types":[]}];
implementors["onig"] = [{"text":"impl FromIterator&lt;RegexOptions&gt; for RegexOptions","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SearchOptions&gt; for SearchOptions","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SyntaxOperator&gt; for SyntaxOperator","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SyntaxBehavior&gt; for SyntaxBehavior","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TraverseCallbackAt&gt; for TraverseCallbackAt","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MetaCharType&gt; for MetaCharType","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromIterator&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["spinoso_array"] = [{"text":"impl&lt;T&gt; FromIterator&lt;T&gt; for SmallArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; FromIterator&lt;&amp;'a T&gt; for SmallArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FromIterator&lt;T&gt; for Array&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; FromIterator&lt;&amp;'a T&gt; for Array&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; FromIterator&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; FromIterator&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; FromIterator&lt;(usize, V)&gt; for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()